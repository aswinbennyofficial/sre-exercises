package handlers

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/aswinbennyofficial/sre-exercises/internals/database"
	"github.com/aswinbennyofficial/sre-exercises/internals/models"
	"github.com/go-chi/chi/v5"
	"github.com/rs/zerolog/log"
)

// CreateNewStudent is a handler function that creates a new student
// It reads the student details from the request body and inserts it into the database
// Id is auto-generated by the database
func CreateNewStudent(w http.ResponseWriter, r *http.Request) {
	var student models.Student
	err := json.NewDecoder(r.Body).Decode(&student)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error decoding the request body")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	log.Debug().Msgf("Student Id: %d", student.ID)
	log.Debug().Msg("Student name: " + student.Name)
	log.Debug().Msg("Student phone: " + student.Phone)
	log.Debug().Msg("Student address: " + student.Address)

	// Insert the student into the database
	sqlStatement := `INSERT INTO Student (name, phone, address) VALUES ($1, $2, $3)`
	_, err = database.PgxPool.Exec(r.Context(), sqlStatement, student.Name, student.Phone, student.Address)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error inserting student into the database")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	log.Debug().Msg("New student created")
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(`{"message":"New student created"}`))
}

// GetAllStudents is a handler function that returns all details of all students.
// It reads the query parameters for pagination and sorting.
// It queries the database for students with pagination and returns the result as JSON.
func GetAllStudents(w http.ResponseWriter, r *http.Request) {
	// Parse query parameters for pagination
	limit := 10 // Default number of items per page
	offset := 0 // Default offset
	sortBy := "id" // Default sorting criteria


	limitStr := r.URL.Query().Get("limit")
	offsetStr := r.URL.Query().Get("offset")
	sortByStr := r.URL.Query().Get("sort")

	// If limit is provided and is a positive integer, set it
	if limitStr != "" {
		l, err := strconv.Atoi(limitStr)
		if err == nil && l > 0 {
			limit = l
		}
	}

	// If offset is provided and is a positive integer, set it
	if offsetStr != "" {
		o, err := strconv.Atoi(offsetStr)
		if err == nil && o > 0 {
			offset = o
		}
	}

	if sortByStr != "" {
		// Validate the sorting criteria to prevent SQL injection
		// Supported sorting criteria: id, name
		validSortColumns := map[string]bool{"id": true, "name": true}
		// If the sorting criteria is valid, set it 
		if _, ok := validSortColumns[sortByStr]; ok {
			sortBy = sortByStr
		} else {
			log.Warn().Msgf("Invalid sort criteria: %s", sortByStr)
		}
	}

	// Query the database for students with pagination
	sqlStatement := `SELECT id, name, phone, address FROM Student ORDER BY `+sortBy +` LIMIT $1 OFFSET $2 `
	rows, err := database.PgxPool.Query(context.Background(), sqlStatement, limit, offset)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error querying the database for students")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	students := []models.Student{}
	for rows.Next() {
		var student models.Student
		err := rows.Scan(&student.ID, &student.Name, &student.Phone, &student.Address)
		if err != nil {
			log.Error().Err(err).Caller().Msg("Error scanning student row")
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		students = append(students, student)
	}

	// Convert the students slice to JSON
	studentsJSON, err := json.Marshal(students)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error marshalling students to JSON")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.Write(studentsJSON)
}

// GetStudent is a handler function that returns the details of a student with the given id.
// It reads the student id from the URL path params and queries the database for the student.
func GetStudent(w http.ResponseWriter, r *http.Request) {
	// Get the student id from the URL
	studentID := chi.URLParam(r, "id")

	// Query the database for the student
	sqlStatement := `SELECT id, name, phone, address FROM Student WHERE id=$1`
	row := database.PgxPool.QueryRow(context.Background(), sqlStatement, studentID)

	var student models.Student
	err := row.Scan(&student.ID, &student.Name, &student.Phone, &student.Address)
	if err != nil {
		if err.Error() == "no rows in result set" {
			w.WriteHeader(http.StatusNotFound)
			w.Write([]byte(`{"message":"Student not found"}`))
			return
		}else{
			log.Error().Err(err).Caller().Msg("Error scanning student row")
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
	}

	// Convert the student to JSON
	studentJSON, err := json.Marshal(student)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error marshalling student to JSON")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	
	log.Debug().Msgf("Student with id %s found", studentID)
	w.Header().Set("Content-Type", "application/json")
	w.Write(studentJSON)
}

// DeleteStudent is a handler function that deletes a student with the given id.
// It reads the student id from the URL path params and deletes the student from the database.
func DeleteStudent(w http.ResponseWriter, r *http.Request) {
	// Get the student id from the URL
	studentID := chi.URLParam(r, "id")

	// Delete the student from the database
	sqlStatement := `DELETE FROM Student WHERE id=$1`
	_, err := database.PgxPool.Exec(context.Background(), sqlStatement, studentID)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error deleting student from the database")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	log.Debug().Msgf("Student with id %s deleted", studentID)
	w.WriteHeader(http.StatusNoContent)
}

// UpdateStudent is a handler function that updates the details of a student with the given id. Update is not partial.
// It reads the student id from the URL path params and the updated student details from the request body.
func UpdateStudent(w http.ResponseWriter, r *http.Request) {
	// Get the student id from the URL
	studentID := chi.URLParam(r, "id")

	var student models.Student
	err := json.NewDecoder(r.Body).Decode(&student)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error decoding the request body")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	// Update the student in the database
	sqlStatement := `UPDATE Student SET name=$1, phone=$2, address=$3 WHERE id=$4`
	_, err = database.PgxPool.Exec(context.Background(), sqlStatement, student.Name, student.Phone, student.Address, studentID)
	if err != nil {
		log.Error().Err(err).Caller().Msg("Error updating student in the database")
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
	log.Debug().Msgf("Student with id %s updated", studentID)
	w.WriteHeader(http.StatusNoContent)
}